(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-3a4ff9e5"],{ad6e:function(e,n,t){"use strict";var r=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"m-4 text-center"},[t("a",{staticClass:"btn btn-success",on:{click:function(n){return e.goToHomePage()}}},[e._v("回首頁")])])},a=[],o={name:"Footer",methods:{goToHomePage:function(){this.$router.push("/resume/Home")}}},s=o,i=t("2877"),c=Object(i["a"])(s,r,a,!1,null,null,null);n["a"]=c.exports},f543:function(e,n,t){"use strict";t.r(n);var r=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("div",{staticClass:"row m-4"},[t("div",{staticClass:"col-md-8 col-12"},[t("CodeContainer",{attrs:{title:"簡易自動化部署"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[t("pre",[e._v("本機\n1. 在SpringBoot框架下，進行程式開發。\n2. 利用Git Hooks在程式碼後提交後，自動執行指定的腳本。\n3. 自動打包，傳送jar檔。\n\n伺服器\n1. 重啟服務。\n            ")])]},proxy:!0}])})],1)]),t("div",{staticClass:"row m-4"},[t("div",{staticClass:"col-md-8 col-12"},[t("CodeContainer",{attrs:{title:"post-commit"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[t("pre",[e._v('#!/bin/bash\n\nbase_dir="/d/my_project/HelloJava"\nkey_path="$base_dir/.git/hooks/enter_key"\njar_path="$base_dir/target/demo-0.0.1-SNAPSHOT.jar"\n\nserver_info="user@192.168.X.X"\ntarget_dir="/home/user/java_project"\n\n# 在本機打包\nmvn clean package\n\n# 傳送jar檔到指定伺服器\nscp -i "$key_path" "$jar_path" "$server_info:$target_dir"\n\n# 執行伺服器上的腳本\nssh -i "$key_path" "$server_info" "cd $target_dir; ./deployment.sh"\n            ')])]},proxy:!0}])})],1)]),t("div",{staticClass:"row m-4"},[t("div",{staticClass:"col-md-8 col-12"},[t("CodeContainer",{attrs:{title:"deployment.sh"},scopedSlots:e._u([{key:"sourceCode",fn:function(){return[t("pre",[e._v('#!/bin/bash\n\napp_name="my_test"\nimage_ver="1.0"\nport=8081\n\n# 刪掉原本的container\ncheck_docker_ps=$(docker ps | grep "$app_name" | wc -l)\nif [ "$check_docker_ps" = 1 ]; then\n    docker rm -f "$app_name"\nfi\n\n# 刪掉原本的image\ncheck_docker_images=$(docker images | grep "$app_name" | wc -l)\nif [ "$check_docker_images" = 1 ]; then\n    docker rmi "$app_name:$image_ver"\nfi\n\n# 製作新的image\ndocker build -t "$app_name:$image_ver" .\n\n# 執行新的container\ndocker run -d -p "$port:$port" --name "$app_name" "$app_name:$image_ver"\n\n# 刪掉原本的jar\nif [ -f ./demo-0.0.1-SNAPSHOT.jar ]; then\n    rm -f ./demo-0.0.1-SNAPSHOT.jar\nfi\n            ')])]},proxy:!0}])})],1)]),t("Footer")],1)},a=[],o=t("32f4"),s=t("ad6e"),i={name:"Deployment",components:{CodeContainer:o["a"],Footer:s["a"]}},c=i,p=t("2877"),d=Object(p["a"])(c,r,a,!1,null,null,null);n["default"]=d.exports}}]);
//# sourceMappingURL=chunk-3a4ff9e5.edbd5f39.js.map